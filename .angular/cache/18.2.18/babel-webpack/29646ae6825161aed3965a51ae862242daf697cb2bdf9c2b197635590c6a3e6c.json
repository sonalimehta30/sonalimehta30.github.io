{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./items.service\";\n// @Injectable()\nexport class GuardService {\n  constructor(router, authCheck) {\n    this.router = router;\n    this.authCheck = authCheck;\n  }\n  canActivate(route, state) {\n    console.log(route, state);\n    switch (state.url) {\n      case '/dashboard':\n        {\n          if (!this.authCheck.checkAuth()) {\n            console.log('Not Validated');\n            let url = this.router.createUrlTree(['/profile']);\n            return url;\n          }\n        }\n        break;\n      case '/profile':\n        {\n          if (this.authCheck.checkAuth()) {\n            console.log('Validated');\n            this.router.navigate(['/dashboard']);\n            return false;\n          }\n        }\n        break;\n    }\n    return true;\n  }\n  static {\n    this.ɵfac = function GuardService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || GuardService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.ItemsService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: GuardService,\n      factory: GuardService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["GuardService","constructor","router","authCheck","canActivate","route","state","console","log","url","checkAuth","createUrlTree","navigate","i0","ɵɵinject","i1","Router","i2","ItemsService","factory","ɵfac","providedIn"],"sources":["/Users/sonalimehta/Documents/GitHub/sonalimehta30.github.io/src/app/services/guard.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { ItemsService } from './items.service';\n\n// @Injectable()\n@Injectable({\n  providedIn: 'root'\n})\nexport class GuardService {\n  \n  constructor(private router: Router, private authCheck:ItemsService) { }\n  \n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | UrlTree{\n    console.log(route, state)\n    switch(state.url){\n      case '/dashboard': {\n        if(!this.authCheck.checkAuth()){\n          console.log('Not Validated')\n          let url = this.router.createUrlTree(['/profile'])\n          return url;\n        }\n      }\n      break;\n      \n      case '/profile': {\n        if(this.authCheck.checkAuth()){\n          console.log('Validated')\n          this.router.navigate(['/dashboard'])\n          return false;\n        }\n      }break;\n    }\n    return true; \n    \n  }\n}\n"],"mappings":";;;AAIA;AAIA,OAAM,MAAOA,YAAY;EAEvBC,YAAoBC,MAAc,EAAUC,SAAsB;IAA9C,KAAAD,MAAM,GAANA,MAAM;IAAkB,KAAAC,SAAS,GAATA,SAAS;EAAiB;EAEtEC,WAAWA,CAACC,KAA6B,EAAEC,KAA0B;IACnEC,OAAO,CAACC,GAAG,CAACH,KAAK,EAAEC,KAAK,CAAC;IACzB,QAAOA,KAAK,CAACG,GAAG;MACd,KAAK,YAAY;QAAE;UACjB,IAAG,CAAC,IAAI,CAACN,SAAS,CAACO,SAAS,EAAE,EAAC;YAC7BH,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;YAC5B,IAAIC,GAAG,GAAG,IAAI,CAACP,MAAM,CAACS,aAAa,CAAC,CAAC,UAAU,CAAC,CAAC;YACjD,OAAOF,GAAG;UACZ;QACF;QACA;MAEA,KAAK,UAAU;QAAE;UACf,IAAG,IAAI,CAACN,SAAS,CAACO,SAAS,EAAE,EAAC;YAC5BH,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;YACxB,IAAI,CAACN,MAAM,CAACU,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;YACpC,OAAO,KAAK;UACd;QACF;QAAC;IACH;IACA,OAAO,IAAI;EAEb;;;uCA1BWZ,YAAY,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,YAAA;IAAA;EAAA;;;aAAZlB,YAAY;MAAAmB,OAAA,EAAZnB,YAAY,CAAAoB,IAAA;MAAAC,UAAA,EAFX;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}